{"version":3,"sources":["types/aliases.ts","components/BgParticles.tsx","img/coffee-bk.png","components/Start.tsx","lib/Storage.ts","pages/Home.tsx","pages/How.tsx","lib/GridLogic.ts","lib/Maps.ts","components/GameBoard.tsx","components/SideButton.tsx","components/Side.tsx","components/Stars.tsx","lib/LevelCheck.ts","pages/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Status","BgParticles","id","options","fullScreen","enable","zIndex","background","color","value","fpsLimit","interactivity","detectsOn","events","resize","modes","bubble","distance","duration","opacity","size","push","quantity","repulse","particles","animation","h","count","offset","speed","sync","s","l","links","width","collisions","move","direction","outMode","random","straight","number","density","value_area","shape","type","image","src","height","detectRetina","Start","className","coffeebk","alt","render","history","onClick","style","fontWeight","get","a","k","localStorage","getItem","sessionStorage","set","v","setItem","lGet","sGet","lSet","sSet","Home","useEffect","How","process","transposeToColumns","matrix","cols","r","length","col","c","transposeToRows","compressRight","ret","filtered","filter","shiftct","Array","fill","concat","compressLeft","compressUp","transform","compressDown","mergeX","ALIVE","parseInt","mergeY","morphs","dir","alert","map","_","toString","morphRight","morphLeft","morphUp","morphDown","getAllMaps","maps","getAllMeta","meta","getMap","getMeta","objective","moves","cheat","Cell","n","GameBoard","retry","useState","cellMatrix","updateCellMatrix","console","log","handleKeyDown","event","setTimeout","key","window","addEventListener","removeEventListener","idx","SideButton","construct","data","Side","points","Stars","usedMoves","bestMoves","clear","check","cond","currStatus","CLEAR","FAIL","ERROR","Tutorial","setPoints","setMoves","fail","setFail","setClear","clickable","setClickable","retryLevel","fadeOut","fadeIn","overlay","document","getElementById","String","fadeFx","setInterval","clearInterval","fadeOutFx","translateX","elem","x","setTransitionSpeed","transition","hide","handlePoints","e","Number","status","level","currMatrix","includes","objectiveCheck","uc","boxShadow","onunload","replace","fontSize","split","App","basename","exact","path","component","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.5c1c8447.chunk.js","sourcesContent":["export type NNA = Array<Array<number>>;\nexport type morph = (matrix: NNA) => NNA;\n\nexport type CheckFn = (moves: number, cond: boolean) => Status;\nexport type StatusFn = (level: number, moves: number) => Status;\n\nexport enum Status {\n    CLEAR = \"CLEAR\",\n    FAIL = \"FAIL\",\n    ALIVE = \"ALIVE\",\n    ERROR = \"ERROR\",\n}\n","import React from 'react';\nimport Particles from \"react-tsparticles\";\n\nexport const BgParticles = () => {\n    return (\n        <>\n            <Particles\n                id=\"particles\"\n                options={{\n                    fullScreen: {\n                        enable: true,\n                        zIndex: -1,\n                    },\n                    background: {\n                        color: {\n                            value: \"#FEF6EF\",\n                        },\n                    },\n                    fpsLimit: 60,\n                    interactivity: {\n                        detectsOn: \"canvas\",\n                        events: {\n                            resize: true,\n                        },\n                        modes: {\n                            bubble: {\n                                distance: 400,\n                                duration: 2,\n                                opacity: 0.8,\n                                size: 40,\n                            },\n                            push: {\n                                quantity: 4,\n                            },\n                            repulse: {\n                                distance: 100,\n                                duration: 0.4,\n                            },\n                        },\n                    },\n                    particles: {\n                        color: {\n                            value: \"#39d353\",\n                            animation: {\n                                h: {\n                                    count: 0,\n                                    enable: true,\n                                    offset: 0,\n                                    speed: 50,\n                                    sync: false,\n                                },\n                                s: {\n                                    count: 0,\n                                    enable: false,\n                                    offset: 0,\n                                    speed: 1,\n                                    sync: false,\n                                },\n                                l: {\n                                    count: 0,\n                                    enable: false,\n                                    offset: 0,\n                                    speed: 1,\n                                    sync: false,\n                                },\n                            },\n                        },\n                        links: {\n                            color: \"#b59174\",\n                            distance: 150,\n                            enable: true,\n                            opacity: 0.5,\n                            width: 1,\n                        },\n                        collisions: {\n                            enable: true,\n                        },\n                        move: {\n                            direction: \"none\",\n                            enable: true,\n                            outMode: \"bounce\",\n                            random: false,\n                            speed: 4,\n                            straight: false,\n                        },\n                        number: {\n                            density: {\n                                enable: true,\n                                value_area: 800,\n                            },\n                            value: 20,\n                        },\n                        opacity: {\n                            value: 0.9,\n                        },\n                        shape: {\n                            type: \"image\",\n                            options: {\n                                image: [{\n                                    // src: \"https://i.ibb.co/qMNxg9d/coffee-bk.png\",\n                                    src: \"https://i.ibb.co/nDshRQx/coffee-main.png\",\n                                    // src: \"https://lh3.googleusercontent.com/IpSbRWHYYo071Ao-sjBeW2Ts1KX-XeT0PzROx2b21wGgjNo5mojoLyTsdOXkWbtkW3o5JJ8wt3hpuXRTH4ZjIWlLcfqQn3DK5BTgIl-HkehljdCs9lAU53KmmVaLkc0SHvTKRlQUgyFlKCCgAhN-pJiat1PQP9lZEmMmUqu_ynd8aQvGPR-TOiK4gHaGUYbETs564jpav1O9DeP6ktPDacHHDdQr2GDx_XMk8zqvWVWo8ksbd-gMClf7TqSdd5gf1vwker-aI6UeMKWVwLl8deR0Y4ApQRMHDE7XDDTBnXdyeRu61fs6TvhBLB8Zl9ZjwM6Kpgw2QfECx7POBFeffFDw60UIcllKhOokrwvI4CNyMcsTIpOwqbP5ltmbTUDbF6keMLyVm9if3xLKPQjCHdodxZ-IsaK0kDRwXI6-z1UyijAkQf5W70cIki853FdWyMleWekw_OMtgwKu7QeHgsz2TaI0bDD8WZvBSsAWHuzglDKjZQ6Md9MTjTEnWuF0mvXgG5RcVY81dfMHUZCnl5inU55Be6zFES7r_2vBNT7Lnr0Jf6gixAaCBMEjKos0DYvCTe4vWhRz8NYN_MTPicbVUkhO0C19ZttwwwY5f5hcZbYE4uLYelLBjKhICW3J2EYLLcd4fQORHJMweTZnThMqxMfsV3GX6IS9jdcZIBqf-umbldqACK-31B74btS481Kl5i7QHzCe-4t-u2wVAlU=s512-no?authuser=0\",\n                                    // src: \"https://lh3.googleusercontent.com/NBWbXSfNwB83GR9C-Jvgx5SUj2-dYSEZLiFg-VcRBOVUwZAXXEmW0ujTcr5Vhgz1wmjpon861p0sGJRjnBZGz2UxQULko-0ge-vCcrrAmdTod1cuULTePmIDYxgyhgs17jvEvvb44IUuo8N4C82GNv85aUsfZXqNI4RC_LcprCHFL6YaibRGyN3j6ECYYr1Ur-Mr9kb4Frml7EXDCd2SXhNB_Ukgiy4w-Ug3DatK1Ae_6ZiM4KouUuqbUWETByrvseQOWY2hupaMAzaqpqCB7yPPoUq7P4kLSDtleZkTc69jAkPSf6_QoRaHkT9fiiXdDze73iZ0g50GorkzEdiVpxUaXQ9KlhVH0Gkv4L8YrWTqJd3fI_61f6FDXSWl_c_42Uuqkgi7gP6B7tHAnUwBEOJ6Ra5CoDG7akAw9ta_ekdiIDJ_fOWZigDmOrJ8JeUHW79dzhecMq27cBCP2TeKYmyTleMBRIyIAf2NrfoJwlRT1aryClBLa63TnAqtcdNOKWZ4oZwANiquXuDUHbFr7QaEh41Eq9xXd9GZV1MGj-95OzL218jwGXQ0DiyAPqm27WrRJHdZm7lE64w06Un2trTW0TUwWqN_Mxx7D21owKx9bCzIj-uJo4QW44pIncc2dNxGU-7sNf1pDpePUSE3O0Y74ou_WkR6p3Xu4ixdpZSesqzmRmo0VBtEKxFAq-MXBnc5YqDX616fKxxxXG1tVK8=s512-no?authuser=0\",\n                                    width: 512,\n                                    height: 512,\n                                }],\n                            },\n                        },\n                        size: {\n                            random: true,\n                            value: 30,\n                        },\n                    },\n                    detectRetina: true,\n                }}\n            />\n        </>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/coffee-bk.0626c06f.png\";","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport coffeebk from '../img/coffee-bk.png';\nimport '../styles/home/home.scss';\n\nexport const Start: React.FC = () => {\n    return (\n        <>\n            <div className={\"flex-wrapper\"}>\n                <div id={\"cb-wrapper\"}>\n                    <img id={\"coffee-bk\"} src={coffeebk} alt={\"coffee-bk\"}/>\n                </div>\n                <div id={\"bts-wrapper\"}>\n                    <div id={\"start-bt-wrapper\"}>\n                        <Route render={({history}) => (\n                            <span\n                                id={\"start-bt\"}\n                                onClick={() => {\n                                    history.push(\"/play\")\n                                }}>\n                            Start Game!\n                        </span>\n                        )} />\n                    </div>\n                    <div id={\"how-bt-wrapper\"}>\n                        <Route render={({history}) => (\n                            <span\n                                id={\"how-bt\"}\n                                onClick={() => {\n                                    history.push(\"/how\")\n                                }}>\n                            How To Play\n                        </span>\n                        )} />\n                    </div>\n                </div>\n                <span style={{fontWeight: \"bold\"}}><u>NB: Only landscape mode is supported</u></span>\n            </div>\n        </>\n    )\n}\n","const get = (a: string) => (k: string): any => {\n    switch (a) {\n        case \"local\":\n            return localStorage.getItem(k);\n        case \"session\":\n            return sessionStorage.getItem(k);\n        default:\n            return null;\n    }\n}\n\nconst set = (a: string) => (k: string) => (v: any): void => {\n    switch (a) {\n        case \"local\":\n            localStorage.setItem(k, v);\n            break\n        case \"session\":\n            sessionStorage.setItem(k, v);\n            break\n        default:\n            sessionStorage.setItem(k, v);\n    }\n}\n\nexport const lGet: (k: string) => any = get(\"local\");\nexport const sGet: (k: string) => any = get(\"session\");\nexport const lSet: (k: string) => (v: any) => void = set(\"local\");\nexport const sSet: (k: string) => (v: any) => void = set(\"session\");\n","import React, { useEffect } from 'react';\nimport {BgParticles} from \"../components/BgParticles\";\nimport {Start} from \"../components/Start\";\nimport {lGet, sGet, lSet, sSet} from \"../lib/Storage\";\n\nconst Home = () => {\n    useEffect(() => {\n        if (!lGet(\"coffee\")) lSet(\"coffee\")(0);\n        if (!sGet(\"level\")) sSet(\"level\")(0);\n    }, []);\n\n    return (\n        <>\n            <BgParticles />\n            <Start />\n        </>\n    )\n}\n\nexport default Home;\n","import React from 'react';\nimport {Route} from \"react-router-dom\";\nimport \"../styles/how/how.scss\";\n\nconst How = () => {\n    return (\n        <>\n            <div id={\"center-flex\"}>\n                <div id={\"master-flex-wrap\"}>\n                    <section id={\"control-sect\"} className={\"sect\"}>\n                        <div id={\"control-img-wrapper\"} className={\"img-wrap\"}>\n                            <img src={`${process.env.PUBLIC_URL}/assets/how/gridHEIGHT500.png`} alt={\"control\"} id={\"how-control\"} className={\"img\"}/>\n                        </div>\n                        <div id={\"control-text-wrapper\"} className={\"text-wrap\"}>\n                            <span id={\"control-head\"} className={\"head\"}>Controls</span>\n                            <span id={\"control-body\"} className={\"body\"}>Game mechanics are familiar and inspired by 2048. Only identical tiles can merge. Arrow keys are used to move the tiles.</span>\n                        </div>\n                    </section>\n                    <hr />\n                    <section id={\"flow-sect\"} className={\"sect\"}>\n                        <div id={\"flow-text-wrapper\"} className={\"text-wrap\"}>\n                            <span id={\"flow-head\"} className={\"head\"}>Game Flow</span>\n                            <span id={\"flow-body\"} className={\"body\"}>When two identical tiles become merged, the new merged tile gets added to the points score.<br /><br />Each level has an objective which must be cleared within a certain amount of moves in order to move on to the next.</span>\n                        </div>\n                        <div id={\"flow-img-wrapper\"} className={\"img-wrap\"}>\n                            <img src={`${process.env.PUBLIC_URL}/assets/how/pointsHEIGHT500.png`} alt={\"flow\"} id={\"how-flow\"} className={\"img\"}/>\n                        </div>\n                    </section>\n                    <hr />\n                    <section id={\"utils-sect\"} className={\"sect\"}>\n                        <div id={\"utils-img-wrapper\"} className={\"img-wrap\"}>\n                            <img src={`${process.env.PUBLIC_URL}/assets/how/utilsHEIGHT200.png`} alt={\"utils\"} id={\"how-utils\"} className={\"img\"}/>\n                        </div>\n                        <div id={\"utils-text-wrapper\"} className={\"text-wrap\"}>\n                            <span id={\"utils-head\"} className={\"head\"}>Utils</span>\n                            <span id={\"utils-body\"} className={\"body\"}>When stuck on a level, pressing the question mark button will reveal the solution. The arrows revealed correspond to which arrow key to press.<br /><br />The retry button will reset the current level.</span>\n                        </div>\n                    </section>\n                    <hr />\n                    <section id={\"stars-sect\"} className={\"sect\"}>\n                        <div id={\"stars-text-wrapper\"} className={\"text-wrap\"}>\n                            <span id={\"stars-head\"} className={\"head\"}>Stars</span>\n                            <span id={\"stars-body\"} className={\"body\"}>When the level is failed or anticheat is triggered because of too many moves in one go, you get 0 gold stars.<br /><br />When the level is cleared with a suboptimal solution, you get 1 gold star.<br /><br />When the level is cleared with one more move than the optimal solution, you get 2 gold stars.<br /><br />When the level is cleared with the optimal solution (or even fewer moves than the optimal solution), you get 3 gold stars.</span>\n                        </div>\n                        <div id={\"stars-img-wrapper\"} className={\"img-wrap\"}>\n                            <img src={`${process.env.PUBLIC_URL}/assets/how/gridstarsHEIGHT1000.png`} alt={\"stars\"} id={\"how-stars\"} className={\"img\"}/>\n                        </div>\n                    </section>\n                    <div id={\"back-bt-wrapper\"}>\n                        <Route render={({history}) => (\n                            <span\n                                id={\"back-bt\"}\n                                onClick={() => {\n                                    history.push(\"/\")\n                                }}>\n                            Back\n                        </span>\n                        )} />\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default How;","import {NNA, morph, Status} from \"../types/aliases\";\nimport {sGet, sSet} from \"./Storage\";\n\n/**\n * Returns a matrix with its columns as rows\n * @param {NNA} matrix - Matrix to transform\n * @returns {NNA} Transformed matrix\n */\nconst transposeToColumns = (matrix: NNA): NNA => {\n    let cols: NNA = [];\n    for (let r = 0; r < matrix.length; r++) {\n        let col: Array<number> = [];\n        for (let c = 0; c < matrix.length; c++) {\n            col.push(matrix[c][r]);\n        }\n        cols.push(col);\n    }\n    return cols;\n}\n\nconst transposeToRows = (matrix: NNA): NNA => {\n    return transposeToColumns(matrix);\n}\n\n/**\n * Returns a matrix with the truthy values compressed to the right and the falseys shifted to the left\n * @param {NNA} matrix - Matrix to compress\n * @returns {NNA} Compressed matrix\n */\nconst compressRight = (matrix: NNA): NNA => {\n    let ret: NNA = [];\n    for (let r = 0; r < matrix.length; r++) {\n        let filtered: Array<number> = matrix[r].filter(v => v);\n        let shiftct: Array<number> = Array(matrix[r].length - filtered.length).fill(0);\n        ret.push(shiftct.concat(filtered));\n    }\n    return ret;\n}\n\n/**\n * Returns a matrix with the truthy values compressed to the left and the falseys shifted to the right\n * @param {NNA} matrix - Matrix to compress\n * @returns {NNA} Compressed matrix\n */\nconst compressLeft = (matrix: NNA): NNA => {\n    let ret: NNA = [];\n    for (let r = 0; r < matrix.length; r++) {\n        let filtered: Array<number> = matrix[r].filter(v => v);\n        let shiftct: Array<number> = Array(matrix[r].length - filtered.length).fill(0);\n        ret.push(filtered.concat(shiftct));\n    }\n\n    return ret;\n}\n\n/**\n * Returns a transformed matrix with its truthy values compressed to the left\n * @param {NNA} matrix - Matrix to compress\n * @returns {NNA} Transformed compressed matrix\n */\nconst compressUp = (matrix: NNA): NNA => {\n    let transform: NNA = transposeToColumns(matrix);\n    return compressLeft(transform);\n}\n\n/**\n * Returns a transformed matrix with its truthy values compressed to the right\n * @param {NNA} matrix - Matrix to compress\n * @returns {NNA} Transformed compressed matrix\n */\nconst compressDown = (matrix: NNA): NNA => {\n    let transform: NNA = transposeToColumns(matrix);\n    return compressRight(transform);\n}\n\n/**\n * Returns a matrix with the values on the x-axis merged once\n * @param {NNA} matrix - Matrix to merge\n * @returns {NNA} Merged matrix\n */\nconst mergeX = (matrix: NNA): NNA => {\n    for (let r = 0; r < matrix.length; r++) {\n        for (let c = 0; c < matrix[r].length; c++) {\n            if (c === matrix[r].length - 1) {\n                continue;\n            }\n            if (matrix[r][c] === matrix[r][c + 1]) {\n                matrix[r][c] = matrix[r][c] + matrix[r][c + 1];\n                matrix[r][c + 1] = 0;\n                if (sGet(\"currStatus\") === Status.ALIVE) {\n                    sSet(\"points\")(\n                        parseInt(sGet(\"points\") || 0, 10) + matrix[r][c]\n                    );\n                }\n            }\n        }\n    }\n    return matrix;\n}\n\n/**\n * Returns a transformed matrix with the values on the y-axis merged once\n * @param {NNA} matrix - Matrix to merge\n * @returns {NNA} Merged matrix\n */\nconst mergeY = (matrix: NNA): NNA => {\n    return transposeToRows(mergeX(matrix));\n}\n\n// Handling movement is compress -> merge -> compress\n\nconst morphs: (dir: string) => (matrix: NNA) => NNA = (dir) => (matrix) => {\n    let ret: NNA;\n    switch (dir) {\n        case \"right\":\n            ret = compressRight(mergeX(compressRight(matrix)));\n            break\n        case \"left\":\n            ret = compressLeft(mergeX(compressLeft(matrix)));\n            break\n        case \"up\":\n            ret = transposeToRows(compressUp(mergeY(compressUp(matrix))));\n            break\n        case \"down\":\n            ret = transposeToRows(compressDown(mergeY(compressDown(matrix))));\n            break\n        default:\n            alert(\"ERROR\");\n            return [...Array(8)].map(_ => Array(8).fill(2));\n    }\n    if (ret.toString() !== matrix.toString()) {\n        if (sGet(\"currStatus\") === Status.ALIVE) {\n            sSet(\"moves\")(parseInt(sGet(\"moves\")) - 1);\n        }\n    }\n    sSet(\"currMatrix\")(ret);\n    return ret;\n}\n\nexport const morphRight: morph = morphs(\"right\");\nexport const morphLeft: morph = morphs(\"left\");\nexport const morphUp: morph = morphs(\"up\");\nexport const morphDown: morph = morphs(\"down\");\n","import { NNA } from \"../types/aliases\";\nimport maps from \"../data/maps.json\";\nimport meta from \"../data/meta.json\";\nimport { Maps, Metas, Meta } from \"../types/interfaces\";\n\nconst retErrMap = (): NNA => {\n\treturn [...Array(8)].map(_ => Array(8).fill(2));\n}\n\nconst getAllMaps = (): Maps | null => {\n\treturn maps;\n}\n\nconst getAllMeta = (): Metas | null => {\n\treturn meta;\n}\n\nexport const getMap = (map: number): NNA => {\n\tconst maps = getAllMaps();\n\tif (maps === null) return retErrMap();\n\treturn maps[map];\n}\n\nexport const getMeta: (map: number) => Meta = (map) => {\n    const meta = getAllMeta();\n    if (meta === null) return { objective: \"Error\", moves: 0, cheat: \"Error\" };\n    return meta[map];\n}\n","import React, { useState, useEffect } from 'react';\nimport '../styles/game/cell.scss';\nimport '../styles/game/board.scss';\nimport { GameCell } from \"../types/interfaces\";\nimport { NNA } from \"../types/aliases\";\nimport { GameBoardProps } from \"../types/interfaces\";\nimport { morphRight, morphLeft, morphUp, morphDown } from \"../lib/GridLogic\";\nimport {sSet} from \"../lib/Storage\";\nimport {getMap} from \"../lib/Maps\";\n\nconst Cell: React.FC<GameCell> = ({n}) => {\n    return (\n        <div className={`cell type${n}`}>\n            {n > 0 ? n : \"\"}\n        </div>\n    );\n}\n\nexport const GameBoard: React.FC<GameBoardProps> = ({ map, retry }) => {\n\tconst [cellMatrix, updateCellMatrix] = useState<NNA>(getMap(map));\n\n\tuseEffect(() => {\n\t\tupdateCellMatrix(getMap(map));\n\t\tsSet(\"currMatrix\")(getMap(map));\n\t\tconsole.log(map)\n\t}, [map]);\n\n\tuseEffect(() => {\n\t\tif (retry) {\n\t\t\tupdateCellMatrix(getMap(map));\n\t\t\tsSet(\"currMatrix\")(getMap(map));\n\t\t\tconsole.log(map)\n\t\t\tsSet(\"retry\")(false);\n\t\t}\n\t}, [map, retry])\n\n\tconst handleKeyDown = (event: KeyboardEvent) => {\n        setTimeout(() => {\n\t\t\tswitch (event.key) {\n\t\t\t\tcase \"ArrowUp\":\n\t\t\t\t\tupdateCellMatrix(morphUp(cellMatrix));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ArrowRight\":\n\t\t\t\t\tupdateCellMatrix(morphRight(cellMatrix));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ArrowDown\":\n\t\t\t\t\tupdateCellMatrix(morphDown(cellMatrix));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"ArrowLeft\":\n\t\t\t\t\tupdateCellMatrix(morphLeft(cellMatrix));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}, 0)\n\t}\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('keydown', handleKeyDown);\n\t\treturn () => {\n\t\t\twindow.removeEventListener('keydown', handleKeyDown);\n\t\t};\n\t});\n\n    return (\n        <div className={\"board-wrapper\"}>\n            <div className={\"board\"}>\n                {cellMatrix.map((r: number[]) => {\n                    return (\n                        r.map((c: number, idx: number) => {\n                            return <Cell n={c} key={idx}/>\n                        })\n                    )\n                })}\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {SideButtonProps} from \"../types/interfaces\";\n\nexport const SideButton: React.FC<SideButtonProps> = ({ construct, data }) => {\n    return (\n        <>\n            <div className={\"side-button\"}>\n                <span id={\"construct\"}><u>{construct}</u></span>\n                <br/>\n                <br/>\n                <span id={\"data\"}>{data}</span>\n            </div>\n        </>\n    )\n}\n","import React from 'react';\nimport {SideButton} from \"./SideButton\";\nimport \"../styles/game/side.scss\"\nimport {SideProps} from \"../types/interfaces\";\n\nexport const Side: React.FC<SideProps> = ({points, objective, moves}) => {\n    return (\n        <>\n            <div id={\"side-wrapper\"}>\n                {/*<h1>Side</h1>*/}\n                <section id={\"points\"}>\n                    <SideButton construct={\"Points\"} data={points}/>\n                </section>\n\n                <section id={\"objective\"}>\n                    <SideButton construct={\"Objective\"} data={objective}/>\n                </section>\n\n                <section id={\"Moves\"}>\n                    <SideButton construct={\"Moves\"} data={moves}/>\n                </section>\n\n                {/* Experimental Stuff */}\n                {/*<section id={\"Completed\"}>*/}\n                {/*    <SideButton construct={\"[Experimental] Percentage\"} data={\"0%\"}/>*/}\n                {/*</section>*/}\n            </div>\n        </>\n    )\n}\n","import React from 'react';\nimport \"../styles/game/stars.scss\";\nimport {StarProps} from \"../types/interfaces\";\n\nexport const Stars: React.FC<StarProps> = ({\n    usedMoves,\n    bestMoves,\n    clear,\n}) => {\n    return (\n        <div id={\"stars-stat\"}>\n            {!clear ?\n                (\n                    <>\n                        <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                        <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                        <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                    </>\n                )\n                : usedMoves <= bestMoves ?\n                    (\n                        <>\n                            <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                            <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                            <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                        </>\n                    )\n                    : usedMoves === bestMoves + 1 ?\n                        (\n                            <>\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                            </>\n                        )\n                        : (\n                            <>\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star\"} />\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                                <img src={`${process.env.PUBLIC_URL}/assets/star.png`} alt={\"star\"} className={\"star gray\"} />\n                            </>\n                        )\n            }\n        </div>\n    );\n}\n","import {Status, CheckFn, StatusFn} from \"../types/aliases\";\nimport {sSet, sGet} from \"./Storage\";\n\nconst check: CheckFn = (moves, cond) => {\n    const currStatus: string = sGet(\"currStatus\");\n    if (moves > 0 && cond) {\n        sSet(\"currStatus\")(Status.CLEAR);\n        return Status.CLEAR;\n    } else if (moves > 0 && !cond) {\n        sSet(\"currStatus\")(Status.ALIVE);\n        return Status.ALIVE;\n    } else if (moves <= 0 && cond && currStatus === Status.ALIVE) {\n        sSet(\"currStatus\")(Status.CLEAR);\n        return Status.CLEAR;\n    } else if (moves <= 0 && !cond) {\n        sSet(\"currStatus\")(Status.FAIL);\n        return Status.FAIL;\n    } else {\n        alert(\"Oops there was an Error\");\n        return Status.ERROR;\n    }\n}\n\nexport const objectiveCheck: StatusFn = (level, moves) => {\n    const currMatrix: string = sGet(\"currMatrix\");\n    const currStatus: string = sGet(\"currStatus\");\n    switch (currStatus) {\n        case Status.CLEAR:\n            return Status.CLEAR;\n        case Status.FAIL:\n            return Status.FAIL;\n        case Status.ERROR:\n            console.log(\"Oops there was an Error\");\n            alert(\"ERROR\");\n            return Status.ERROR;\n        case Status.ALIVE:\n            switch (level) {\n                case 0:\n                    // Objective: Get the 8 tile\n                    return check(moves, currMatrix.includes(\"8\"));\n                case 1:\n                    // Objective: Get the 16 tile\n                    return check(moves, currMatrix.includes(\"16\"));\n                case 2:\n                    // Objective: Merge all tiles (16)\n                    return check(moves, currMatrix.includes(\"16\"));\n                case 3:\n                    // Objective: Get the 64 tile\n                    return check(moves, currMatrix.includes(\"64\"));\n                case 4:\n                    // Objective: Merge all tiles (32)\n                    return check(moves, currMatrix.includes(\"32\"));\n                case 5:\n                    // Objective: Remove all 2 tiles\n                    return check(moves, !currMatrix.includes(\"2\"));\n                case 6:\n                    // Objective: Get the 64 tile\n                    return check(moves, currMatrix.includes(\"64\"));\n                case 7:\n                    // Objective: Remove all tiles under 8\n                    return check(moves, !currMatrix.includes(\"2\") && !currMatrix.includes(\"4\"));\n                case 8:\n                    // Objective: Get the 64 tile\n                    return check(moves, currMatrix.includes(\"64\"));\n                case 9:\n                    // Objective: Merge all tiles (128)\n                    return check(moves, currMatrix.includes(\"128\"));\n                case 10:\n                    // Objective: Get over 300 points\n                    return check(moves, parseInt(sGet(\"points\"), 10) > 300);\n                case 11:\n                    // Objective: Get over 500 points\n                    return check(moves, parseInt(sGet(\"points\"), 10) > 500);\n                case 12:\n                    // Objective: Remove all 32 tiles\n                    return check(moves, !currMatrix.includes(\"32\"));\n                case 13:\n                    // Objective: Remove all 2 tiles & Get over 100 points\n                    return check(moves, !currMatrix.includes(\"2\") && parseInt(sGet(\"points\"), 10) > 100);\n                case 14:\n                    // Objective: Get the 512 tile\n                    return check(moves, currMatrix.includes(\"512\"));\n                default:\n                    console.log(\"Oops there was an Error\");\n                    alert(\"Oops there was an Error\");\n                    return Status.ERROR;\n            }\n        default:\n            console.log(\"Oops there was an Error\");\n            alert(\"Oops there was an Error\");\n            return Status.ERROR;\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport {GameBoard} from \"../components/GameBoard\";\nimport {Side} from \"../components/Side\";\nimport {Stars} from \"../components/Stars\";\nimport {getMeta} from \"../lib/Maps\";\nimport {Status} from \"../types/aliases\";\nimport \"../styles/game/game.scss\"\nimport {sGet, sSet} from \"../lib/Storage\";\nimport {objectiveCheck} from \"../lib/LevelCheck\";\nimport {AiFillQuestionCircle} from \"react-icons/ai\";\nimport {VscDebugRestart} from \"react-icons/vsc\";\n\nconst Tutorial = () => {\n    const [points, setPoints] = useState<number>(0);\n    const [moves, setMoves] = useState<number>(0);\n    const [fail, setFail] = useState<boolean>(false);\n    const [clear, setClear] = useState<boolean>(false);\n    const [clickable, setClickable] = useState<boolean>(true);\n\n    useEffect(() => {\n        if (!sGet(\"level\")) sSet(\"level\")(0);\n        if (!sGet(\"moves\")) sSet(\"moves\")(2);\n        if (!sGet(\"retry\")) sSet(\"retry\")(false);\n        setMoves(sGet(\"moves\"));\n        sSet(\"currStatus\")(Status.ALIVE);\n    }, []);\n\n    const incrementLevel: () => void = () => {\n        if (clickable) {\n            setClickable(false);\n            fadeOut();\n            sSet(\"level\")(parseInt(sGet(\"level\")) + 1);\n            sSet(\"points\")(0);\n            setPoints(0);\n            sSet(\"moves\")(getMeta(parseInt(sGet(\"level\"))).moves);\n            setMoves(sGet(\"moves\"));\n            sSet(\"currStatus\")(Status.ALIVE);\n            setTimeout(() => {\n                setFail(false);\n                setClear(false);\n                setClickable(true);\n            }, 400);\n        }\n    };\n\n    const retryLevel: () => void = () => {\n        if (clickable) {\n            setClickable(false);\n            fadeOut();\n            sSet(\"points\")(0);\n            setPoints(0);\n            sSet(\"moves\")(getMeta(parseInt(sGet(\"level\"))).moves);\n            setMoves(sGet(\"moves\"))\n            sSet(\"currStatus\")(Status.ALIVE);\n            sSet(\"retry\")(true);\n            setTimeout(() => {\n                setFail(false);\n                setClear(false);\n                setClickable(true);\n            }, 500);\n        }\n    }\n\n    const fadeIn: () => void = () => {\n        const overlay: HTMLElement | null = document.getElementById(\"overlay\");\n        if (overlay && overlay.style.opacity < String(1)) {\n            let opacity: number = 0;\n            let fadeFx = setInterval(() => {\n                if (opacity < 1) {\n                    opacity += 0.04;\n                    overlay.style.opacity = String(opacity);\n                } else {\n                    clearInterval(fadeFx);\n                }\n            }, 5);\n        }\n    }\n\n    const fadeOut: () => void = () => {\n        const overlay: HTMLElement | null = document.getElementById(\"overlay\");\n        if (overlay && overlay.style.opacity > String(0)) {\n            let opacity: number = 1;\n            let fadeOutFx = setInterval(() => {\n                if (opacity > 0) {\n                    opacity -= 0.04;\n                    overlay.style.opacity = String(opacity);\n                } else {\n                    clearInterval(fadeOutFx);\n                }\n            }, 5);\n        }\n    }\n\n    const translateX: (elem: HTMLElement | null, x: number) => void = (elem, x) => {\n        if (elem) elem.style.transform = `translateX(${x}px)`;\n    }\n\n    const setTransitionSpeed: (elem: HTMLElement | null, x: number) => void = (elem, x) => {\n        if (elem) elem.style.transition = `transform ${x}ms ease-in-out 25ms`;\n    }\n\n    const reveal: () => void = () => {\n        setTransitionSpeed(document.getElementById(\"solution-overlay\"), 600);\n        translateX(document.getElementById(\"solution-overlay\"), 400);\n    }\n\n    const hide: () => void = () => {\n        setTransitionSpeed(document.getElementById(\"solution-overlay\"), 0);\n        translateX(document.getElementById(\"solution-overlay\"), 0);\n    }\n\n    const handlePoints: (e: KeyboardEvent) => void = (e) => {\n        if (points !== sGet(\"points\")) {\n            setPoints(sGet(\"points\") || 0)\n        }\n        if (sGet(\"currStatus\") === Status.ALIVE) {\n            if (e.key === \"ArrowUp\" || e.key === \"ArrowRight\" || e.key === \"ArrowDown\" || e.key === \"ArrowLeft\") {\n                if (moves > 0) {\n                    setMoves(parseInt(sGet(\"moves\")));\n                }\n                if (Number(sGet(\"moves\")) < 0) {\n                    sSet(\"moves\")(0);\n                    sSet(\"currStatus\")(Status.FAIL);\n                    setFail(true);\n                    alert(\"Anticheat detected you tried to exceed the move limit! Please slow down your key presses\");\n                    fadeIn();\n                }\n                const status = objectiveCheck(parseInt(sGet(\"level\")), parseInt(sGet(\"moves\")));\n                if (status === Status.CLEAR) {\n                    hide();\n                    setClear(true);\n                    fadeIn();\n                }\n                if (status === Status.FAIL) {\n                    hide();\n                    setFail(true);\n                    fadeIn();\n                }\n            }\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"keyup\", handlePoints);\n        return () => {\n            document.removeEventListener(\"keyup\", handlePoints);\n        }\n    })\n\n    useEffect(() => {\n        const uc = document.getElementById(\"ui-container\");\n        if (uc !== null) {\n            if (clear) {\n                uc.style.boxShadow = \"1px 1px 200px 1px #A3FECA\";\n            }\n            if (fail) {\n                uc.style.boxShadow = \"1px 1px 200px 1px #FEAAA3\";\n            }\n        }\n    }, [clear, fail]);\n\n    window.onunload = () => {\n        sessionStorage.clear();\n        sSet(\"level\")(0);\n    }\n\n    return (\n        <>\n            <div id={\"master\"}>\n                <div id={\"game-wrapper\"}>\n                    <GameBoard map={parseInt(sGet(\"level\"))} retry={sGet(\"retry\") === \"true\"} />\n                    <Side\n                        points={points\n                        .toString()\n                        .replace(\"0\", \"O\")\n                    }\n                        objective={getMeta(parseInt(sGet(\"level\"))).objective}\n                        moves={moves\n                              .toString()\n                              .replace(\"0\", \"O\")\n                          }\n                    />\n                </div>\n                <div id={\"footer-wrapper\"}>\n                    <span id={\"level-text\"}>Level&nbsp;{String(parseInt(sGet(\"level\")) + 1)\n                        .replace(\"0\", \"O\")\n                    }</span>\n                    <div id={\"help-wrapper\"}>\n                        <VscDebugRestart id={\"debug-retry\"} style={{\n                            fontSize: \"2.9rem\"\n                        }} onClick={retryLevel} />\n                        <AiFillQuestionCircle id={\"question-circle\"} style={{\n                            fontSize: \"2.9rem\"\n                        }} onClick={reveal} />\n                        <span id={\"solution\"}>\n                            {getMeta(parseInt(sGet(\"level\"))).cheat}\n                        </span>\n                        <div id={\"solution-overlay\"} />\n                    </div>\n                </div>\n            </div>\n            {clear !== fail &&\n            <div id={\"overlay\"}>\n                <div id={\"ui-container\"}>\n                    <span id={\"message\"}>Level {(parseInt(sGet(\"level\")) + 1)\n                        .toString()\n                        .replace(\"0\", \"O\")} {fail\n                        ? \"Failed\"\n                        : clear\n                            ? \"Cleared\"\n                            : \"Oops there was an Error\"\n                    }</span>\n                    <div id={\"stat\"}>\n                        <span id={\"points-stat\"}>\n                            Points: {points\n                            .toString()\n                            .replace(\"0\", \"O\")\n                        }</span>\n                        <br />\n                        <span id={\"moves-stat\"}>\n                            Moves Used: {\n                                `${getMeta(parseInt(sGet(\"level\"))).moves - \n                                parseInt(sGet(\"moves\"))}/${getMeta(sGet(\"level\")).moves}`\n                                    .replace(\"0\", \"O\")\n                            }\n                        </span>\n                        <Stars\n                            usedMoves={getMeta(parseInt(sGet(\"level\"))).moves - parseInt(sGet(\"moves\"))}\n                            bestMoves={getMeta(parseInt(sGet(\"level\"))).cheat.split(\"\").length}\n                            clear={clear}\n                        />\n                    </div>\n                    {clear ?\n                        (<div id={\"button-container\"}>\n                            <div id={\"retry-button\"} onClick={retryLevel}>\n                                <span id={\"retry-text\"}>Retry</span>\n                            </div>\n                            <div id={\"next-button\"} onClick={incrementLevel}>\n                                <span id={\"next-text\"}>Next</span>\n                            </div>\n                        </div>)\n                        :\n                        (<div id={\"button-container\"}>\n                                <div id={\"retry-button\"} onClick={retryLevel}>\n                                    <span id={\"retry-text\"}>Retry</span>\n                                </div>\n                        </div>)\n                    }\n                </div>\n            </div>\n            }\n        </>\n    )\n}\n\nexport default Tutorial;\n","import React from 'react';\nimport './styles/app/app.scss';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport How from './pages/How';\nimport Game from './pages/Game';\n\nfunction App() {\n    return (\n        <HashRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path={\"/\"} component={Home} />\n                <Route exact path={\"/how\"} component={How} />\n                <Route exact path={\"/play\"} component={Game} />\n            </Switch>\n        </HashRouter>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}